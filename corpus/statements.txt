===========
Named nodes
===========

(program)

---

(program
  (named_node
    name: (identifier)))

===============
Anonymous nodes
===============

(program)
"it"

---

(program
  (named_node
    name: (identifier))
  (anonymous_node))

========================
Anonymous nodes (series)
========================

("it" "blorg")

---

(program
  (grouping
    (anonymous_node)
    (anonymous_node)))

===============
Field names
===============

(program
  name: (identifier))

---

(program
  (named_node
    name: (identifier)
    (field_definition
      name: (identifier)
      (named_node
        name: (identifier)))))

===============
Quantifiers (+)
===============

(program
  (identifier)+)

---

(program
  (named_node
    name: (identifier)
    (named_node
      name: (identifier)
      quantifier: (quantifier))))

===============
Quantifiers (?)
===============

(program
  (identifier)?)

---

(program
  (named_node
    name: (identifier)
    (named_node
      name: (identifier)
      quantifier: (quantifier))))

===============
Quantifiers (*)
===============

(program
  (identifier)*)

---

(program
  (named_node
    name: (identifier)
    (named_node
      name: (identifier)
      quantifier: (quantifier))))

======
Groups
======

(
  (comment)
  (function_declaration)
)

---

(program
  (grouping
    (named_node name: (identifier))
    (named_node name: (identifier))))

========
Captures
========

(class_declaration
  body: (class_body) @class.body @test) @blorg

---

(program
  (named_node name: (identifier)
    (field_definition name: (identifier)
      (named_node
        name: (identifier)
        (capture name: (identifier))
        (capture name: (identifier))))
    (capture name: (identifier))))

=====
Lists
=====

[
  "?"
  "+"
  "-"
] @ops

---

(program
  (list
    (anonymous_node)
    (anonymous_node)
    (anonymous_node)
    (capture name: (identifier))))

==========
Predicates
==========

(
  (identifier) @v
  (eq? @v "test" local)
)

---

(program
  (grouping
    (named_node
      name: (identifier)
      (capture name: (identifier)))
    (predicate
      name: (identifier)
      type: (predicate_type)
      parameters: (parameters
        (capture name: (identifier))
        (string)
        (identifier)))))

====================================
Immediate Child Operator (immediate)
====================================

(
  (comment)
  .
  (function_declaration)
)
[(identifier) . (comment) "test"]

---

(program
  (grouping
    (immediate_child_expression
      left: (named_node name: (identifier))
      right: (named_node name: (identifier))))
  (list
    (immediate_child_expression
      left: (named_node name: (identifier))
      right: (named_node name: (identifier)))
    (anonymous_node)))

======================================
Immediate Child Operator (first child)
======================================

(array . (identifier))
[. (identifier) "it"]

---

(program
  (named_node name: (identifier)
    (first_child_expression
      argument: (named_node name: (identifier))))
  (list
    (first_child_expression
      argument: (named_node name: (identifier)))
    (anonymous_node)))

======================================
Immediate Child Operator (last child)
======================================

(array (identifier) .)
[(identifier) . "it"]

---

(program
  (named_node name: (identifier)
    (last_child_expression
      argument: (named_node name: (identifier))))
  (list
    (last_child_expression
      argument: (named_node name: (identifier)))
    (anonymous_node)))

=======
Strings
=======

((identifier) @v
  (#eq? @v "test\"")
  (#eq? @v "tes\"\"ting")
  (#eq? @v "\"test"))

---

(program
  (grouping
    (named_node
      name: (identifier)
      (capture name: (identifier)))
    (predicate
      name: (identifier)
      type: (predicate_type)
      parameters: (parameters
        (capture name: (identifier))
        (string (escape_sequence))))
    (predicate
      name: (identifier)
      type: (predicate_type)
      parameters: (parameters
        (capture name: (identifier))
        (string (escape_sequence) (escape_sequence))))
    (predicate
      name: (identifier)
      type: (predicate_type)
      parameters: (parameters
        (capture name: (identifier))
        (string (escape_sequence))))))

========
Comments
========

(#match?
 @foo
 ; bar
 "foo")

(node
  ; Capture the name
  name: (string))

(string
  ; wild comment!
  )

---

(program
  (predicate
    name: (identifier)
    type: (predicate_type)
    parameters: (parameters
      (capture name: (identifier))
      (comment)
      (string)))
  (named_node
    name: (identifier)
    (comment)
    (field_definition
      name: (identifier)
      (named_node name: (identifier))))
  (named_node
    name: (identifier) (comment)))
